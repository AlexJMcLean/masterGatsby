let path,fetch;_5d6‍.x([["sourceNodes",()=>sourceNodes],["createPages",()=>createPages]]);_5d6‍.w("path",[["default",["path"],function(v){path=v}]]);_5d6‍.w("isomorphic-fetch",[["default",["fetch"],function(v){fetch=v}]]);


async function turnPizzasIntoPages({ graphql, actions }) {
  // Declare the page template
  const pizzaTemplate = path.resolve("./src/templates/Pizza.js");
  // Query all Pizzas
  const { data } = await graphql(`
    query {
      pizzas: allSanityPizza {
        nodes {
          name
          slug {
            current
          }
        }
      }
    }
  `);

  // Dyamically create pages by looping over the Pizzas
  data.pizzas.nodes.forEach((pizza) => {
    actions.createPage({
      path: `pizza/${pizza.slug.current}`,
      component: pizzaTemplate,
      context: {
        slug: pizza.slug.current,
      },
    });
  });
}

async function turnToppingsIntoPages({ graphql, actions }) {
  const toppingTemplate = path.resolve("./src/pages/pizzas.js");
  const { data } = await graphql(`
    query {
      toppings: allSanityTopping {
        nodes {
          name
          id
        }
      }
    }
  `);
  data.toppings.nodes.forEach((topping) => {
    actions.createPage({
      path: `topping/${topping.name}`,
      component: toppingTemplate,
      context: {
        topping: topping.name,
        toppingRegex: `/${topping.name}/i`,
      },
    });
  });
}
async function fetchBeersAndTurnIntoNodes({
  actions,
  createNodeId,
  createContentDigest,
}) {
  // 1. Fetch a  list of beers
  const res = await fetch("https://api.sampleapis.com/beers/ale");
  const beers = await res.json();
  // 2. Loop over each one
  for (const beer of beers) {
    // create a node for each beer
    const nodeMeta = {
      id: createNodeId(`beer-${beer.name}`),
      parent: null,
      children: [],
      internal: {
        type: "Beer",
        mediaType: "application/json",
        contentDigest: createContentDigest(beer),
      },
    };
    _5d6‍.g.console.log({ ...beer });
    // 3. Create a node for that beer
    actions.createNode({
      ...beer,
      ...nodeMeta,
    });
  }
}

       async function sourceNodes(params) {
  // fetch list of beers and source them into Gatsby
  await fetchBeersAndTurnIntoNodes(params);
}

       async function createPages(params) {
  // create pages dynamically
  await Promise.all([
    turnPizzasIntoPages(params),
    turnToppingsIntoPages(params),
  ]);
}
